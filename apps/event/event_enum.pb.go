// Code generated by github.com/infraboard/mcube
// DO NOT EDIT

package event

import (
	"bytes"
	"fmt"
	"strings"
)

// ParseSeverityFromString Parse Severity from string
func ParseSeverityFromString(str string) (Severity, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := Severity_value[strings.ToUpper(key)]
	if !ok {
		return 0, fmt.Errorf("unknown Severity: %s", str)
	}

	return Severity(v), nil
}

// Equal type compare
func (t Severity) Equal(target Severity) bool {
	return t == target
}

// IsIn todo
func (t Severity) IsIn(targets ...Severity) bool {
	for _, target := range targets {
		if t.Equal(target) {
			return true
		}
	}

	return false
}

// MarshalJSON todo
func (t Severity) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(strings.ToUpper(t.String()))
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *Severity) UnmarshalJSON(b []byte) error {
	ins, err := ParseSeverityFromString(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}

// ParseProviderTypeFromString Parse ProviderType from string
func ParseProviderTypeFromString(str string) (ProviderType, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := ProviderType_value[strings.ToUpper(key)]
	if !ok {
		return 0, fmt.Errorf("unknown ProviderType: %s", str)
	}

	return ProviderType(v), nil
}

// Equal type compare
func (t ProviderType) Equal(target ProviderType) bool {
	return t == target
}

// IsIn todo
func (t ProviderType) IsIn(targets ...ProviderType) bool {
	for _, target := range targets {
		if t.Equal(target) {
			return true
		}
	}

	return false
}

// MarshalJSON todo
func (t ProviderType) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(strings.ToUpper(t.String()))
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *ProviderType) UnmarshalJSON(b []byte) error {
	ins, err := ParseProviderTypeFromString(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}

// ParseStateFromString Parse State from string
func ParseStateFromString(str string) (State, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := State_value[strings.ToUpper(key)]
	if !ok {
		return 0, fmt.Errorf("unknown State: %s", str)
	}

	return State(v), nil
}

// Equal type compare
func (t State) Equal(target State) bool {
	return t == target
}

// IsIn todo
func (t State) IsIn(targets ...State) bool {
	for _, target := range targets {
		if t.Equal(target) {
			return true
		}
	}

	return false
}

// MarshalJSON todo
func (t State) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(strings.ToUpper(t.String()))
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *State) UnmarshalJSON(b []byte) error {
	ins, err := ParseStateFromString(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}
