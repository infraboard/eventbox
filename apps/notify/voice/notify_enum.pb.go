// Code generated by github.com/infraboard/mcube
// DO NOT EDIT

package voice

import (
	"bytes"
	"fmt"
	"strings"
)

// ParseProviderFromString Parse Provider from string
func ParseProviderFromString(str string) (Provider, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := Provider_value[strings.ToUpper(key)]
	if !ok {
		return 0, fmt.Errorf("unknown Provider: %s", str)
	}

	return Provider(v), nil
}

// Equal type compare
func (t Provider) Equal(target Provider) bool {
	return t == target
}

// IsIn todo
func (t Provider) IsIn(targets ...Provider) bool {
	for _, target := range targets {
		if t.Equal(target) {
			return true
		}
	}

	return false
}

// MarshalJSON todo
func (t Provider) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(strings.ToUpper(t.String()))
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *Provider) UnmarshalJSON(b []byte) error {
	ins, err := ParseProviderFromString(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}

// ParseNotifyStatusFromString Parse NotifyStatus from string
func ParseNotifyStatusFromString(str string) (NotifyStatus, error) {
	key := strings.Trim(string(str), `"`)
	v, ok := NotifyStatus_value[strings.ToUpper(key)]
	if !ok {
		return 0, fmt.Errorf("unknown NotifyStatus: %s", str)
	}

	return NotifyStatus(v), nil
}

// Equal type compare
func (t NotifyStatus) Equal(target NotifyStatus) bool {
	return t == target
}

// IsIn todo
func (t NotifyStatus) IsIn(targets ...NotifyStatus) bool {
	for _, target := range targets {
		if t.Equal(target) {
			return true
		}
	}

	return false
}

// MarshalJSON todo
func (t NotifyStatus) MarshalJSON() ([]byte, error) {
	b := bytes.NewBufferString(`"`)
	b.WriteString(strings.ToUpper(t.String()))
	b.WriteString(`"`)
	return b.Bytes(), nil
}

// UnmarshalJSON todo
func (t *NotifyStatus) UnmarshalJSON(b []byte) error {
	ins, err := ParseNotifyStatusFromString(string(b))
	if err != nil {
		return err
	}
	*t = ins
	return nil
}
