// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: apps/notify/group/pb/group.proto

package group

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroupManagementClient is the client API for GroupManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupManagementClient interface {
	CreateIMGroup(ctx context.Context, in *CreateIMGroupRequest, opts ...grpc.CallOption) (*IMGroup, error)
	QueryIMGroup(ctx context.Context, in *QueryIMGroupRequest, opts ...grpc.CallOption) (*IMGroupSet, error)
	DescribeIMGroup(ctx context.Context, in *DescribeIMGroupRequest, opts ...grpc.CallOption) (*IMGroup, error)
	UpdateIMGroup(ctx context.Context, in *UpdateIMGroupRequest, opts ...grpc.CallOption) (*IMGroup, error)
}

type groupManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupManagementClient(cc grpc.ClientConnInterface) GroupManagementClient {
	return &groupManagementClient{cc}
}

func (c *groupManagementClient) CreateIMGroup(ctx context.Context, in *CreateIMGroupRequest, opts ...grpc.CallOption) (*IMGroup, error) {
	out := new(IMGroup)
	err := c.cc.Invoke(ctx, "/infraboard.eventbox.group.GroupManagement/CreateIMGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagementClient) QueryIMGroup(ctx context.Context, in *QueryIMGroupRequest, opts ...grpc.CallOption) (*IMGroupSet, error) {
	out := new(IMGroupSet)
	err := c.cc.Invoke(ctx, "/infraboard.eventbox.group.GroupManagement/QueryIMGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagementClient) DescribeIMGroup(ctx context.Context, in *DescribeIMGroupRequest, opts ...grpc.CallOption) (*IMGroup, error) {
	out := new(IMGroup)
	err := c.cc.Invoke(ctx, "/infraboard.eventbox.group.GroupManagement/DescribeIMGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupManagementClient) UpdateIMGroup(ctx context.Context, in *UpdateIMGroupRequest, opts ...grpc.CallOption) (*IMGroup, error) {
	out := new(IMGroup)
	err := c.cc.Invoke(ctx, "/infraboard.eventbox.group.GroupManagement/UpdateIMGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupManagementServer is the server API for GroupManagement service.
// All implementations must embed UnimplementedGroupManagementServer
// for forward compatibility
type GroupManagementServer interface {
	CreateIMGroup(context.Context, *CreateIMGroupRequest) (*IMGroup, error)
	QueryIMGroup(context.Context, *QueryIMGroupRequest) (*IMGroupSet, error)
	DescribeIMGroup(context.Context, *DescribeIMGroupRequest) (*IMGroup, error)
	UpdateIMGroup(context.Context, *UpdateIMGroupRequest) (*IMGroup, error)
	mustEmbedUnimplementedGroupManagementServer()
}

// UnimplementedGroupManagementServer must be embedded to have forward compatible implementations.
type UnimplementedGroupManagementServer struct {
}

func (UnimplementedGroupManagementServer) CreateIMGroup(context.Context, *CreateIMGroupRequest) (*IMGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIMGroup not implemented")
}
func (UnimplementedGroupManagementServer) QueryIMGroup(context.Context, *QueryIMGroupRequest) (*IMGroupSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryIMGroup not implemented")
}
func (UnimplementedGroupManagementServer) DescribeIMGroup(context.Context, *DescribeIMGroupRequest) (*IMGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeIMGroup not implemented")
}
func (UnimplementedGroupManagementServer) UpdateIMGroup(context.Context, *UpdateIMGroupRequest) (*IMGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIMGroup not implemented")
}
func (UnimplementedGroupManagementServer) mustEmbedUnimplementedGroupManagementServer() {}

// UnsafeGroupManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupManagementServer will
// result in compilation errors.
type UnsafeGroupManagementServer interface {
	mustEmbedUnimplementedGroupManagementServer()
}

func RegisterGroupManagementServer(s grpc.ServiceRegistrar, srv GroupManagementServer) {
	s.RegisterService(&GroupManagement_ServiceDesc, srv)
}

func _GroupManagement_CreateIMGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIMGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagementServer).CreateIMGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.eventbox.group.GroupManagement/CreateIMGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagementServer).CreateIMGroup(ctx, req.(*CreateIMGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManagement_QueryIMGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIMGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagementServer).QueryIMGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.eventbox.group.GroupManagement/QueryIMGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagementServer).QueryIMGroup(ctx, req.(*QueryIMGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManagement_DescribeIMGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeIMGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagementServer).DescribeIMGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.eventbox.group.GroupManagement/DescribeIMGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagementServer).DescribeIMGroup(ctx, req.(*DescribeIMGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupManagement_UpdateIMGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIMGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupManagementServer).UpdateIMGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infraboard.eventbox.group.GroupManagement/UpdateIMGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupManagementServer).UpdateIMGroup(ctx, req.(*UpdateIMGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GroupManagement_ServiceDesc is the grpc.ServiceDesc for GroupManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GroupManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "infraboard.eventbox.group.GroupManagement",
	HandlerType: (*GroupManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateIMGroup",
			Handler:    _GroupManagement_CreateIMGroup_Handler,
		},
		{
			MethodName: "QueryIMGroup",
			Handler:    _GroupManagement_QueryIMGroup_Handler,
		},
		{
			MethodName: "DescribeIMGroup",
			Handler:    _GroupManagement_DescribeIMGroup_Handler,
		},
		{
			MethodName: "UpdateIMGroup",
			Handler:    _GroupManagement_UpdateIMGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apps/notify/group/pb/group.proto",
}
